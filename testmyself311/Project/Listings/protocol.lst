C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PROTOCOL
OBJECT MODULE PLACED IN .\Objects\protocol.obj
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ..\User\protocol.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\protocol.lst
                    -) TABS(2) OBJECT(.\Objects\protocol.obj)

line level    source

   1          /****************************************Copyright (c)*************************
   2          **                               版权所有 (C), 2015-2017, 涂鸦科技
   3          **
   4          **                                 http://www.tuya.com
   5          **
   6          **--------------文件信息-------------------------------------------------------
   7          **文   件   名: protocol.c
   8          **描        述: 下发/上报数据处理函数
   9          **使 用 说 明 :
  10          
  11                            *******非常重要，一定要看哦！！！********
  12          
  13          ** 1、用户在此文件中实现数据下发/上报功能
  14          ** 2、DP的ID/TYPE及数据处理函数都需要用户按照实际定义实现
  15          ** 3、当开始某些宏定义后需要用户实现代码的函数内部有#err提示,完成函数后请删除该#err
  16          **
  17          **--------------当前版本修订---------------------------------------------------
  18          ** 版  本: v1.0
  19          ** 日　期: 2017年5月3日
  20          ** 描　述: 1:创建涂鸦bluetooth对接MCU_SDK
  21          **
  22          **-----------------------------------------------------------------------------
  23          ******************************************************************************/
  24          //#include "include.h"
  25          
  26          #include "bluetooth.h"
  27          
  28          #define RADIUS_1M 5000000
  29          #define RADIUS_2M 3200000
  30          #define RADIUS_3M 2000000
  31          #define RADIUS_4M 1000000
  32          #define RADIUS_5M 400000
  33          
  34            
  35          //extern TYPE_BUFFER_S FlashBuffer;
  36          
  37          /******************************************************************************
  38                                          移植须知:
  39          1:MCU必须在while中直接调用mcu_api.c内的bt_uart_service()函数
  40          2:程序正常初始化完成后,建议不进行关串口中断,如必须关中断,关中断时间必须短,关中断会引起串口数据包丢失
  41          3:请勿在中断/定时器中断内调用上报函数
  42          ******************************************************************************/
  43          
  44                   
  45          /******************************************************************************
  46                                        第一步:初始化
  47          1:在需要使用到bt相关文件的文件中include "bt.h"
  48          2:在MCU初始化中调用mcu_api.c文件中的bt_protocol_init()函数
  49          3:将MCU串口单字节发送函数填入protocol.c文件中uart_transmit_output函数内,并删除#error
  50          4:在MCU串口接收函数中调用mcu_api.c文件内的uart_receive_input函数,并将接收到的字节作为参数传入
  51          5:单片机进入while循环后调用mcu_api.c文件内的bt_uart_service()函数
  52          ******************************************************************************/
  53          
  54          extern u8 xdata LIGHT_TH,light_ad;
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 2   

  55          extern u16 xdata DELAY_NUM;
  56          extern u8 xdata SWITCHflag ;
  57          extern u8 xdata lightvalue ;
  58          extern ulong xdata TH ;
  59          extern  u8 xdata switchcnt ;
  60          void Flash_EraseBlock(unsigned int fui_Address);//扇区擦除
  61          void FLASH_WriteData(unsigned char fuc_SaveData, unsigned int fui_Address);
  62          void Delay_us_1(uint q1);
  63          void send_data(u8 d);
  64          void savevar(void);
  65          //u8 test_LIGHT_TH;
  66          //u8 test_DELAY_NUM;
  67          //u8 test_lightvalue;
  68          //u8 test_TH;
  69          
  70          /******************************************************************************
  71                                  1:dp数据点序列类型对照表
  72                    **此为自动生成代码,如在开发平台有相关修改请重新下载MCU_SDK**         
  73          ******************************************************************************/
  74          const DOWNLOAD_CMD_S  xdata download_cmd[] =
  75          {
  76            {DPID_SWITCH_LED, DP_TYPE_BOOL},
  77            //{DPID_WORK_MODE, DP_TYPE_ENUM},
  78            {DPID_BRIGHT_VALUE, DP_TYPE_VALUE},
  79            //{DPID_DEVICE_MODE, DP_TYPE_ENUM},
  80            //{DPID_PIR_STATE, DP_TYPE_ENUM},
  81            {DPID_CDS, DP_TYPE_ENUM},
  82            //{DPID_PIR_SENSITIVITY, DP_TYPE_ENUM},
  83            {DPID_PIR_DELAY, DP_TYPE_VALUE},
  84            //{DPID_SWITCH_PIR, DP_TYPE_BOOL},
  85            //{DPID_PIR_RESUME_COUNTDOWN, DP_TYPE_VALUE},
  86            //{DPID_STANDBY_TIME, DP_TYPE_VALUE},
  87            {DPID_SENSING_RADIUS, DP_TYPE_VALUE},
  88            //{DPID_HANG_HIGH, DP_TYPE_VALUE},
  89          //  {DPID_SWITCH_LED, DP_TYPE_BOOL},
  90          //  {DPID_WORK_MODE, DP_TYPE_ENUM},
  91          //  {DPID_BRIGHT_VALUE, DP_TYPE_VALUE},
  92          //  {DPID_DEVICE_MODE, DP_TYPE_ENUM},
  93          //  {DPID_PIR_STATE, DP_TYPE_ENUM},
  94          //  {DPID_CDS, DP_TYPE_ENUM},
  95          //  {DPID_PIR_SENSITIVITY, DP_TYPE_ENUM},
  96          //  {DPID_PIR_DELAY, DP_TYPE_VALUE},
  97          //  {DPID_SWITCH_PIR, DP_TYPE_BOOL},
  98          //  {DPID_PIR_RESUME_COUNTDOWN, DP_TYPE_VALUE},
  99          //  {DPID_STANDBY_TIME, DP_TYPE_VALUE},
 100          //  {DPID_SENSING_RADIUS, DP_TYPE_VALUE},
 101          //  {DPID_HANG_HIGH, DP_TYPE_VALUE},
 102          };
 103          
 104          
 105          
 106          
 107          /******************************************************************************
 108                                     2:串口单字节发送函数
 109          请将MCU串口发送函数填入该函数内,并将接收到的数据作为参数传入串口发送函数
 110          ******************************************************************************/
 111          
 112          /*****************************************************************************
 113          函数名称 : uart_transmit_output
 114          功能描述 : 发数据处理
 115          输入参数 : value:串口收到字节数据
 116          返回参数 : 无
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 3   

 117          使用说明 : 请将MCU串口发送函数填入该函数内,并将接收到的数据作为参数传入串口发送函数
 118          *****************************************************************************/
 119          void uart_transmit_output(unsigned char value)
 120          {
 121   1      // #error "请将MCU串口发送函数填入该函数,并删除该行"
 122   1        
 123   1        
 124   1            SBUF = value;
 125   1          while(!(SCON & 0x02));
 126   1          SCON &=~ 0x02;
 127   1        
 128   1      /*
 129   1        //示例:
 130   1        extern void Uart_PutChar(unsigned char value);
 131   1        Uart_PutChar(value);                                  //串口发送函数
 132   1      */  
 133   1      }
 134          /******************************************************************************
 135                                     第二步:实现具体用户函数
 136          1:APP下发数据处理
 137          2:数据上报处理
 138          ******************************************************************************/
 139          
 140          /******************************************************************************
 141                                      1:所有数据上报处理
 142          当前函数处理全部数据上报(包括可下发/可上报和只上报)
 143            需要用户按照实际情况实现:
 144            1:需要实现可下发/可上报数据点上报
 145            2:需要实现只上报数据点上报
 146          此函数为MCU内部必须调用
 147          用户也可调用此函数实现全部数据上报
 148          ******************************************************************************/
 149          
 150          //自动化生成数据上报函数
 151          
 152          /*****************************************************************************
 153          函数名称 : all_data_update
 154          功能描述 : 系统所有dp点信息上传,实现APP和muc数据同步
 155          输入参数 : 无
 156          返回参数 : 无
 157          使用说明 : 此函数SDK内部需调用;
 158                     MCU必须实现该函数内数据上报功能;包括只上报和可上报可下发型数据
 159          *****************************************************************************/
 160          void all_data_update(void)
 161          {
 162   1        u8 radius,light;
 163   1        //#error "请在此处理可下发可上报数据及只上报数据示例,处理完成后删除该行"
 164   1        //此代码为平台自动生成，请按照实际数据修改每个可下发可上报函数和只上报函数
 165   1          
 166   1          mcu_dp_bool_update(DPID_SWITCH_LED,SWITCHflag); //BOOL型数据上报;
 167   1          //mcu_dp_enum_update(DPID_WORK_MODE,SWITCHflag); //枚举型数据上报;
 168   1          mcu_dp_value_update(DPID_BRIGHT_VALUE,lightvalue); //VALUE型数据上报;
 169   1          //mcu_dp_enum_update(DPID_DEVICE_MODE,SWITCHflag); //枚举型数据上报;
 170   1          //mcu_dp_enum_update(DPID_PIR_STATE,SWITCHflag); //枚举型数据上报;
 171   1        
 172   1         // mcu_dp_enum_update(DPID_CDS,LIGHT_TH/4); //枚举型数据上报;
 173   1        
 174   1          if(LIGHT_TH==255)
 175   1            light=0;
 176   1          else if(LIGHT_TH==200)
 177   1            light=2;
 178   1          else if(LIGHT_TH==40)
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 4   

 179   1            light=3;    
 180   1          else if(LIGHT_TH==20)
 181   1            light=4;
 182   1          else //if(LIGHT_TH==200)
 183   1            light=5;
 184   1          mcu_dp_enum_update(DPID_CDS,light); //枚举型数据上报;
 185   1        
 186   1          //mcu_dp_enum_update(DPID_PIR_SENSITIVITY,SWITCHflag); //枚举型数据上报;
 187   1          mcu_dp_value_update(DPID_PIR_DELAY,DELAY_NUM/4); //VALUE型数据上报;
 188   1      //    mcu_dp_bool_update(DPID_SWITCH_PIR,SWITCHflag); //BOOL型数据上报;
 189   1      //    mcu_dp_value_update(DPID_PIR_RESUME_COUNTDOWN,DELAY_NUM); //VALUE型数据上报;
 190   1      //    mcu_dp_value_update(DPID_STANDBY_TIME,DELAY_NUM); //VALUE型数据上报;
 191   1        
 192   1        
 193   1          if(TH==RADIUS_1M)
 194   1            radius=1;
 195   1          else if(TH==RADIUS_2M)
 196   1            radius=2;
 197   1          else if(TH==RADIUS_3M)
 198   1            radius=3; 
 199   1          else if(TH==RADIUS_4M)
 200   1            radius=4;
 201   1          else
 202   1            radius=5;
 203   1          
 204   1          //savevar();
 205   1        
 206   1          mcu_dp_value_update(DPID_SENSING_RADIUS,radius);
 207   1          
 208   1       //   mcu_dp_value_update(DPID_SENSING_RADIUS,TH/1000); //VALUE型数据上报;
 209   1      //    mcu_dp_value_update(DPID_HANG_HIGH,SWITCHflag); //VALUE型数据上报;
 210   1      
 211   1      
 212   1      
 213   1      }
 214          
 215          
 216          /******************************************************************************
 217                                          WARNING!!!    
 218                                      2:所有数据上报处理
 219          自动化代码模板函数,具体请用户自行实现数据处理
 220          ******************************************************************************/
 221          
 222          /*****************************************************************************
 223          函数名称 : dp_download_switch_led_handle
 224          功能描述 : 针对DPID_SWITCH_LED的处理函数
 225          输入参数 : value:数据源数据
 226                  : length:数据长度
 227          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 228          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 229          *****************************************************************************/
 230          static unsigned char dp_download_switch_led_handle(const unsigned char value[], unsigned short length)
 231          {
 232   1          //示例:当前DP类型为BOOL
 233   1          unsigned char ret;
 234   1          //0:关/1:开
 235   1          unsigned char switch_led;
 236   1          
 237   1          switch_led = mcu_get_dp_download_bool(value,length);
 238   1          if(switch_led == 0) {
 239   2              //开关关
 240   2              //LIGHT_OFF;
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 5   

 241   2          }else {
 242   2              //开关开
 243   2              //LIGHT_ON;
 244   2          }
 245   1        
 246   1          //处理完DP数据后应有反馈
 247   1          ret = mcu_dp_bool_update(DPID_SWITCH_LED,switch_led);
 248   1          if(ret == SUCCESS)
 249   1              return SUCCESS;
 250   1          else
 251   1              return ERROR;
 252   1      }
 253          /*****************************************************************************
 254          函数名称 : dp_download_work_mode_handle
 255          功能描述 : 针对DPID_WORK_MODE的处理函数
 256          输入参数 : value:数据源数据
 257                  : length:数据长度
 258          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 259          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 260          *****************************************************************************/
 261          //static unsigned char dp_download_work_mode_handle(const unsigned char value[], unsigned short length)
 262          //{
 263          //    //示例:当前DP类型为ENUM
 264          //    unsigned char ret;
 265          //    unsigned char work_mode;
 266          //    
 267          //    work_mode = mcu_get_dp_download_enum(value,length);
 268          //    switch(work_mode) {
 269          //        case 0:
 270          //        break;
 271          //        
 272          //        case 1:
 273          //        break;
 274          //        
 275          //        default:
 276          //    
 277          //        break;
 278          //    }
 279          //    
 280          //    //处理完DP数据后应有反馈
 281          //    ret = mcu_dp_enum_update(DPID_WORK_MODE, work_mode);
 282          //    if(ret == SUCCESS)
 283          //        return SUCCESS;
 284          //    else
 285          //        return ERROR;
 286          //}
 287          /*****************************************************************************
 288          函数名称 : dp_download_bright_value_handle
 289          功能描述 : 针对DPID_BRIGHT_VALUE的处理函数
 290          输入参数 : value:数据源数据
 291                  : length:数据长度
 292          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 293          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 294          *****************************************************************************/
 295          static unsigned char dp_download_bright_value_handle(const unsigned char value[], unsigned short length)
 296          {
 297   1          //示例:当前DP类型为VALUE
 298   1          unsigned char ret;
 299   1          unsigned long bright_value;
 300   1          
 301   1          bright_value = mcu_get_dp_download_value(value,length);
 302   1          /*
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 6   

 303   1          //VALUE类型数据处理
 304   1          
 305   1          
 306   1          */
 307   1          lightvalue = bright_value;
 308   1          savevar();
 309   1        
 310   1          //处理完DP数据后应有反馈
 311   1          ret = mcu_dp_value_update(DPID_BRIGHT_VALUE,bright_value);
 312   1          if(ret == SUCCESS)
 313   1              return SUCCESS;
 314   1          else
 315   1              return ERROR;
 316   1      }
 317          /*****************************************************************************
 318          函数名称 : dp_download_device_mode_handle
 319          功能描述 : 针对DPID_DEVICE_MODE的处理函数
 320          输入参数 : value:数据源数据
 321                  : length:数据长度
 322          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 323          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 324          *****************************************************************************/
 325          //static unsigned char dp_download_device_mode_handle(const unsigned char value[], unsigned short length)
 326          //{
 327          //    //示例:当前DP类型为ENUM
 328          //    unsigned char ret;
 329          //    unsigned char device_mode;
 330          //    
 331          //    device_mode = mcu_get_dp_download_enum(value,length);
 332          //    switch(device_mode) {
 333          //        case 0:
 334          //        break;
 335          //        
 336          //        case 1:
 337          //        break;
 338          //        
 339          //        default:
 340          //    
 341          //        break;
 342          //    }
 343          //    
 344          //    //处理完DP数据后应有反馈
 345          //    ret = mcu_dp_enum_update(DPID_DEVICE_MODE, device_mode);
 346          //    if(ret == SUCCESS)
 347          //        return SUCCESS;
 348          //    else
 349          //        return ERROR;
 350          //}
 351          /*****************************************************************************
 352          函数名称 : dp_download_cds_handle
 353          功能描述 : 针对DPID_CDS的处理函数
 354          输入参数 : value:数据源数据
 355                  : length:数据长度
 356          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 357          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 358          *****************************************************************************/
 359          static unsigned char dp_download_cds_handle(const unsigned char value[], unsigned short length)
 360          {
 361   1          //示例:当前DP类型为ENUM
 362   1          unsigned char ret;
 363   1          unsigned char cds;
 364   1          
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 7   

 365   1          cds = mcu_get_dp_download_enum(value,length);
 366   1          switch(cds) {
 367   2      //         case 5:
 368   2      //      LIGHT_TH=cds*4;
 369   2      //         break;
 370   2      //         
 371   2      //         case 10:
 372   2      //      LIGHT_TH=cds*4;
 373   2      //         break;
 374   2      //         
 375   2      //         case 50:
 376   2      //      LIGHT_TH=cds*4;
 377   2      //         break;
 378   2      //         
 379   2      //         case 300:
 380   2      //         break;
 381   2      //         
 382   2      //         case 2000:
 383   2      //         break;
 384   2              
 385   2              case 0:   //2000LUS
 386   2            LIGHT_TH=255;//cds*4;
 387   2              break;
 388   2              
 389   2              case 1:   //300LUX
 390   2            LIGHT_TH=255;//cds*4;
 391   2              break;
 392   2              
 393   2              case 2:   //50LUX
 394   2            LIGHT_TH=200;
 395   2              break;
 396   2              
 397   2              case 3: //10LUX
 398   2                LIGHT_TH=40;
 399   2            
 400   2              break;
 401   2              
 402   2              case 4: //5LUX
 403   2                LIGHT_TH=20;
 404   2              break;
 405   2              
 406   2              case 5:
 407   2                LIGHT_TH=light_ad;
 408   2                break;
 409   2              
 410   2              default:
 411   2          
 412   2              break;
 413   2          }
 414   1        
 415   1         
 416   1          savevar();
 417   1        
 418   1          //处理完DP数据后应有反馈
 419   1          ret = mcu_dp_enum_update(DPID_CDS, cds);
 420   1          if(ret == SUCCESS)
 421   1              return SUCCESS;
 422   1          else
 423   1              return ERROR;
 424   1      }
 425          /*****************************************************************************
 426          函数名称 : dp_download_pir_sensitivity_handle
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 8   

 427          功能描述 : 针对DPID_PIR_SENSITIVITY的处理函数
 428          输入参数 : value:数据源数据
 429                  : length:数据长度
 430          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 431          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 432          *****************************************************************************/
 433          //static unsigned char dp_download_pir_sensitivity_handle(const unsigned char value[], unsigned short leng
             -th)
 434          //{
 435          //    //示例:当前DP类型为ENUM
 436          //    unsigned char ret;
 437          //    unsigned char pir_sensitivity;
 438          //    
 439          //    pir_sensitivity = mcu_get_dp_download_enum(value,length);
 440          //    switch(pir_sensitivity) {
 441          //        case 0:
 442          //        break;
 443          //        
 444          //        case 1:
 445          //        break;
 446          //        
 447          //        case 2:
 448          //        break;
 449          //        
 450          //        default:
 451          //    
 452          //        break;
 453          //    }
 454          //    
 455          //    //处理完DP数据后应有反馈
 456          //    ret = mcu_dp_enum_update(DPID_PIR_SENSITIVITY, pir_sensitivity);
 457          //    if(ret == SUCCESS)
 458          //        return SUCCESS;
 459          //    else
 460          //        return ERROR;
 461          //}
 462          /*****************************************************************************
 463          函数名称 : dp_download_pir_delay_handle
 464          功能描述 : 针对DPID_PIR_DELAY的处理函数
 465          输入参数 : value:数据源数据
 466                  : length:数据长度
 467          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 468          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 469          *****************************************************************************/
 470          static unsigned char dp_download_pir_delay_handle(const unsigned char value[], unsigned short length)
 471          {
 472   1          //示例:当前DP类型为VALUE
 473   1          unsigned char ret;
 474   1          unsigned long pir_delay;
 475   1          
 476   1          pir_delay = mcu_get_dp_download_value(value,length);
 477   1          /*
 478   1          //VALUE类型数据处理
 479   1          
 480   1          */
 481   1          DELAY_NUM = pir_delay*4;
 482   1          savevar();
 483   1        
 484   1          //处理完DP数据后应有反馈
 485   1          ret = mcu_dp_value_update(DPID_PIR_DELAY,pir_delay);
 486   1          if(ret == SUCCESS)
 487   1              return SUCCESS;
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 9   

 488   1          else
 489   1              return ERROR;
 490   1      }
 491          /*****************************************************************************
 492          函数名称 : dp_download_switch_pir_handle
 493          功能描述 : 针对DPID_SWITCH_PIR的处理函数
 494          输入参数 : value:数据源数据
 495                  : length:数据长度
 496          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 497          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 498          *****************************************************************************/
 499          //static unsigned char dp_download_switch_pir_handle(const unsigned char value[], unsigned short length)
 500          //{
 501          //    //示例:当前DP类型为BOOL
 502          //    unsigned char ret;
 503          //    //0:关/1:开
 504          //    unsigned char switch_pir;
 505          //    
 506          //    switch_pir = mcu_get_dp_download_bool(value,length);
 507          //    if(switch_pir == 0) {
 508          //        //开关关
 509          //    }else {
 510          //        //开关开
 511          //    }
 512          //  
 513          //    //处理完DP数据后应有反馈
 514          //    ret = mcu_dp_bool_update(DPID_SWITCH_PIR,switch_pir);
 515          //    if(ret == SUCCESS)
 516          //        return SUCCESS;
 517          //    else
 518          //        return ERROR;
 519          //}
 520          /*****************************************************************************
 521          函数名称 : dp_download_standby_time_handle
 522          功能描述 : 针对DPID_STANDBY_TIME的处理函数
 523          输入参数 : value:数据源数据
 524                  : length:数据长度
 525          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 526          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 527          *****************************************************************************/
 528          //static unsigned char dp_download_standby_time_handle(const unsigned char value[], unsigned short length)
 529          //{
 530          //    //示例:当前DP类型为VALUE
 531          //    unsigned char ret;
 532          //    unsigned long standby_time;
 533          //    
 534          //    standby_time = mcu_get_dp_download_value(value,length);
 535          //    /*
 536          //    //VALUE类型数据处理
 537          //    
 538          //    */
 539          //    
 540          //    //处理完DP数据后应有反馈
 541          //    ret = mcu_dp_value_update(DPID_STANDBY_TIME,standby_time);
 542          //    if(ret == SUCCESS)
 543          //        return SUCCESS;
 544          //    else
 545          //        return ERROR;
 546          //}
 547          /*****************************************************************************
 548          函数名称 : dp_download_sensing_radius_handle
 549          功能描述 : 针对DPID_SENSING_RADIUS的处理函数
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 10  

 550          输入参数 : value:数据源数据
 551                  : length:数据长度
 552          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 553          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 554          *****************************************************************************/
 555          static unsigned char dp_download_sensing_radius_handle(const unsigned char value[], unsigned short length)
 556          {
 557   1          //示例:当前DP类型为VALUE
 558   1          unsigned char ret;//,radius;
 559   1          unsigned long sensing_radius;
 560   1          
 561   1          sensing_radius = mcu_get_dp_download_value(value,length);
 562   1          /*
 563   1          //VALUE类型数据处理
 564   1          
 565   1          */
 566   1         // TH=sensing_radius*1000;
 567   1        
 568   1          if(sensing_radius>5)sensing_radius=5;
 569   1          else if(sensing_radius==0)sensing_radius=1;
 570   1          //radius=sensing_radius;
 571   1        
 572   1          if(sensing_radius==1)
 573   1            TH=RADIUS_1M;
 574   1          else if(sensing_radius==2)
 575   1            TH=RADIUS_2M;
 576   1          else if(sensing_radius==3)
 577   1            TH=RADIUS_3M;
 578   1          else if(sensing_radius==4)
 579   1            TH=RADIUS_4M;
 580   1          else 
 581   1            TH=RADIUS_5M;
 582   1          
 583   1        //  sensing_radius*=4;
 584   1          
 585   1        //  sensing_radius=24-sensing_radius;
 586   1          
 587   1          
 588   1          //TH=sensing_radius*10000;  //5m-60000,4m-110000,3m-160000 ....1m-260000---初步估算值 -20200927
 589   1        
 590   1          savevar();
 591   1          
 592   1          //处理完DP数据后应有反馈
 593   1          //ret = mcu_dp_value_update(DPID_SENSING_RADIUS,sensing_radius);
 594   1          ret = mcu_dp_value_update(DPID_SENSING_RADIUS,sensing_radius);  //-20200927
 595   1          
 596   1          if(ret == SUCCESS)
 597   1              return SUCCESS;
 598   1          else
 599   1              return ERROR;
 600   1      }
 601          /*****************************************************************************
 602          函数名称 : dp_download_hang_high_handle
 603          功能描述 : 针对DPID_HANG_HIGH的处理函数
 604          输入参数 : value:数据源数据
 605                  : length:数据长度
 606          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 607          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 608          *****************************************************************************/
 609          //static unsigned char dp_download_hang_high_handle(const unsigned char value[], unsigned short length)
 610          //{
 611          //    //示例:当前DP类型为VALUE
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 11  

 612          //    unsigned char ret;
 613          //    unsigned long hang_high;
 614          //    
 615          //    hang_high = mcu_get_dp_download_value(value,length);
 616          //    /*
 617          //    //VALUE类型数据处理
 618          //    
 619          //    */
 620          //    
 621          //    //处理完DP数据后应有反馈
 622          //    ret = mcu_dp_value_update(DPID_HANG_HIGH,hang_high);
 623          //    if(ret == SUCCESS)
 624          //        return SUCCESS;
 625          //    else
 626          //        return ERROR;
 627          //}
 628          
 629          
 630          ///******************************************************************************
 631          //                                WARNING!!!                     
 632          //此代码为SDK内部调用,请按照实际dp数据实现函数内部数据
 633          //******************************************************************************/
 634          //#ifdef SUPPORT_MCU_FIRM_UPDATE
 635          ///*****************************************************************************
 636          //函数名称 : mcu_firm_update_handle
 637          //功能描述 : MCU进入固件升级模式
 638          //输入参数 : value:固件缓冲区
 639          //           position:当前数据包在于固件位置
 640          //           length:当前固件包长度(固件包长度为0时,表示固件包发送完成)
 641          //返回参数 : 无
 642          //使用说明 : MCU需要自行实现该功能
 643          //*****************************************************************************/
 644          //unsigned char mcu_firm_update_handle(const unsigned char value[],unsigned long position,unsigned short l
             -ength)
 645          //{
 646          //  #error "请自行完成MCU固件升级代码,完成后请删除该行"
 647          //  unsigned long addr;
 648          // 
 649          //  if(length == 0)
 650          //  {
 651          //#ifdef ENABLE_BOOT
 652          //    //固件数据发送完成
 653          //    FlashBuffer.magic_code = FIREWARE_UPDATE_FLAG;
 654          //    
 655          //    if(Earse_Flash(PARA_ADDR) == ERROR)
 656          //      return ERROR;
 657          //    
 658          //    //写入升级标志
 659          //    if(Write_Flash(PARA_ADDR,(unsigned char *)&FlashBuffer,sizeof(FlashBuffer)) == ERROR)
 660          //      return ERROR;
 661          //    
 662          //    Reset();
 663          //#endif
 664          //  }
 665          //  else
 666          //  {
 667          //    //固件数据处理
 668          //    addr = FIREWARE_ADDR_H;
 669          //     
 670          //    if(position % 1024 == 0)
 671          //    {
 672          //      if(Earse_Flash(addr + position) == ERROR)
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 12  

 673          //        return ERROR;
 674          //    }
 675          //    
 676          //    if(Write_Flash(addr + position,(unsigned char *)value,length) == ERROR)
 677          //      return ERROR;
 678          //  }
 679          
 680          //  return SUCCESS;
 681          //}
 682          //#endif
 683          /******************************************************************************
 684                                          WARNING!!!                     
 685          以下函数用户请勿修改!!
 686          ******************************************************************************/
 687          
 688          void savevar(void)
 689          {
 690   1        unsigned char i;
 691   1        Flash_EraseBlock(0X2F00);
 692   1        Delay_us_1(10000);
 693   1        i=(TH/1000)>>8;
 694   1        FLASH_WriteData(i,0X2F00+0);
 695   1        Delay_us_1(100);
 696   1        i=(TH/1000)&0xff;
 697   1        FLASH_WriteData(i,0X2F00+1);
 698   1        Delay_us_1(100);
 699   1        i=LIGHT_TH;
 700   1        FLASH_WriteData(i,0X2F00+2);
 701   1        Delay_us_1(100);
 702   1        
 703   1        i=DELAY_NUM>>10;
 704   1        FLASH_WriteData(i,0X2F00+3);
 705   1        Delay_us_1(100);
 706   1        i=DELAY_NUM>>2;//&0xff;
 707   1        FLASH_WriteData(i,0X2F00+4);
 708   1        Delay_us_1(100);
 709   1        
 710   1        i=lightvalue;
 711   1        FLASH_WriteData(i,0X2F00+5);
 712   1        Delay_us_1(100);
 713   1        
 714   1        EA=1;       //-20200927
 715   1      
 716   1      }
 717          
 718          
 719          
 720          
 721          /*****************************************************************************
 722          函数名称 : dp_download_handle
 723          功能描述 : dp下发处理函数
 724          输入参数 : dpid:DP序号
 725                     value:dp数据缓冲区地址
 726                     length:dp数据长度
 727          返回参数 : 成功返回:SUCCESS/失败返回:ERRO
 728          使用说明 : 该函数用户不能修改
 729          *****************************************************************************/
 730          unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
 731          {
 732   1        /*********************************
 733   1        当前函数处理可下发/可上报数据调用                    
 734   1        具体函数内需要实现下发数据处理
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 13  

 735   1        完成用需要将处理结果反馈至APP端,否则APP会认为下发失败
 736   1        ***********************************/
 737   1        unsigned char ret;
 738   1        switch(dpid)
 739   1        {
 740   2              case DPID_SWITCH_LED:
 741   2                  //开关处理函数
 742   2                  ret = dp_download_switch_led_handle(value,length);
 743   2                  if(ret==1)
 744   2                  {
 745   3                      switchcnt ++;
 746   3                      if(switchcnt>=5)
 747   3                      {
 748   4                          switchcnt = 0;
 749   4                          send_data(0x55);
 750   4                          send_data(0xAA);
 751   4                          send_data(0X00);
 752   4                          send_data(0X04);
 753   4                          send_data(0X00);
 754   4                          send_data(0X00);
 755   4                          send_data(0X03);
 756   4                      }
 757   3                  
 758   3                  }
 759   2                  
 760   2              break;
 761   2      //        case DPID_WORK_MODE:
 762   2      //            //模式处理函数
 763   2      //            ret = dp_download_work_mode_handle(value,length);
 764   2      //        break;
 765   2              case DPID_BRIGHT_VALUE:
 766   2                  //亮度值处理函数
 767   2                  ret = dp_download_bright_value_handle(value,length);
 768   2                  switchcnt=0;
 769   2              break;
 770   2      //        case DPID_DEVICE_MODE:
 771   2      //            //设备模式处理函数
 772   2      //            ret = dp_download_device_mode_handle(value,length);
 773   2      //        break;
 774   2              case DPID_CDS:
 775   2                  //光敏参数处理函数
 776   2                  ret = dp_download_cds_handle(value,length);
 777   2                  switchcnt=0;
 778   2              break;
 779   2      //        case DPID_PIR_SENSITIVITY:
 780   2      //            //灵敏度处理函数
 781   2      //            ret = dp_download_pir_sensitivity_handle(value,length);
 782   2      //        break;
 783   2              case DPID_PIR_DELAY:
 784   2                  //感应延时处理函数
 785   2                  ret = dp_download_pir_delay_handle(value,length);
 786   2                  switchcnt=0;
 787   2              break;
 788   2      //        case DPID_SWITCH_PIR:
 789   2      //            //感应开关处理函数
 790   2      //            ret = dp_download_switch_pir_handle(value,length);
 791   2      //        break;
 792   2      //        case DPID_STANDBY_TIME:
 793   2      //            //伴亮延时处理函数
 794   2      //            ret = dp_download_standby_time_handle(value,length);
 795   2      //        break;
 796   2              case DPID_SENSING_RADIUS:
C51 COMPILER V9.52.0.0   PROTOCOL                                                          09/28/2020 17:37:45 PAGE 14  

 797   2                  //感应半径处理函数
 798   2                  ret = dp_download_sensing_radius_handle(value,length);
 799   2                  switchcnt=0;
 800   2              break;
 801   2      //        case DPID_HANG_HIGH:
 802   2      //            //挂高处理函数
 803   2      //            ret = dp_download_hang_high_handle(value,length);
 804   2      //        break;
 805   2      
 806   2      
 807   2        default:
 808   2          break;
 809   2        }
 810   1      
 811   1        
 812   1      
 813   1      
 814   1        
 815   1        return ret;
 816   1      }
 817          /*****************************************************************************
 818          函数名称 : get_download_cmd_total
 819          功能描述 : 获取所有dp命令总和
 820          输入参数 : 无
 821          返回参数 : 下发命令总和
 822          使用说明 : 该函数用户不能修改
 823          *****************************************************************************/
 824          unsigned char get_download_cmd_total(void)
 825          {
 826   1        return(sizeof(download_cmd) / sizeof(download_cmd[0]));
 827   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1078    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
