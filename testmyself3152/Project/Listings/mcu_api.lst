C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MCU_API
OBJECT MODULE PLACED IN .\Objects\mcu_api.obj
COMPILER INVOKED BY: d:\cccc2020\TOOL\Keil\C51\BIN\C51.EXE ..\User\mcu_api.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -mcu_api.lst) TABS(2) OBJECT(.\Objects\mcu_api.obj)

line level    source

   1          /****************************************Copyright (c)*************************
   2          **                               版权所有 (C), 2015-2017, 涂鸦科技
   3          **
   4          **                                 http://www.tuya.com
   5          **
   6          **--------------文件信息-------------------------------------------------------
   7          **文   件   名: mcu_api.c
   8          **描        述: 下发/上报数据处理函数
   9          **使 用 说 明 : 此文件下函数无须用户修改,用户需要调用的文件都在该文件内
  10          **
  11          **
  12          **--------------当前版本修订---------------------------------------------------
  13          ** 版  本: v1.0
  14          ** 日　期: 2017年5月3日
  15          ** 描　述: 1:创建涂鸦bluetooth对接MCU_SDK
  16          **
  17          **-----------------------------------------------------------------------------
  18          ******************************************************************************/
  19          #define MCU_API_GLOBAL
  20          
  21          #include "bluetooth.h"
  22          
  23          /*****************************************************************************
  24          函数名称 : hex_to_bcd
  25          功能描述 : hex转bcd
  26          输入参数 : Value_H:高字节/Value_L:低字节
  27          返回参数 : bcd_value:转换完成后数据
  28          *****************************************************************************/
  29          unsigned char hex_to_bcd(unsigned char Value_H,unsigned char Value_L)
  30          {
  31   1        unsigned char bcd_value;
  32   1        
  33   1        if((Value_H >= '0') && (Value_H <= '9'))
  34   1          Value_H -= '0';
  35   1        else if((Value_H >= 'A') && (Value_H <= 'F'))
  36   1          Value_H = Value_H - 'A' + 10;
  37   1        else if((Value_H >= 'a') && (Value_H <= 'f'))
  38   1          Value_H = Value_H - 'a' + 10;
  39   1         
  40   1        bcd_value = Value_H & 0x0f;
  41   1        
  42   1        bcd_value <<= 4;
  43   1        if((Value_L >= '0') && (Value_L <= '9'))
  44   1          Value_L -= '0';
  45   1        else if((Value_L >= 'A') && (Value_L <= 'F'))
  46   1          Value_L = Value_L - 'a' + 10;
  47   1        else if((Value_L >= 'a') && (Value_L <= 'f'))
  48   1          Value_L = Value_L - 'a' + 10;
  49   1        
  50   1        bcd_value |= Value_L & 0x0f;
  51   1      
  52   1        return bcd_value;
  53   1      }
  54          /*****************************************************************************
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 2   

  55          函数名称 : my_strlen
  56          功能描述 : 求字符串长度
  57          输入参数 : src:源地址
  58          返回参数 : len:数据长度
  59          *****************************************************************************/
  60          unsigned long my_strlen(unsigned char *str)  
  61          {
  62   1        unsigned long len = 0;
  63   1        if(str == NULL)
  64   1        { 
  65   2          return 0;
  66   2        }
  67   1        
  68   1        for(len = 0; *str ++ != '\0'; )
  69   1        {
  70   2          len ++;
  71   2        }
  72   1        
  73   1        return len;
  74   1      }
  75          /*****************************************************************************
  76          函数名称 : my_memset
  77          功能描述 : 把src所指内存区域的前count个字节设置成字符c
  78          输入参数 : src:源地址
  79                     ch:设置字符
  80                     count:设置数据长度
  81          返回参数 : src:数据处理完后的源地址
  82          *****************************************************************************/
  83          void *my_memset(void *src,unsigned char ch,unsigned short count)
  84          {
  85   1        unsigned char *tmp = (unsigned char *)src;
  86   1        
  87   1        if(src == NULL)
  88   1        {
  89   2          return NULL;
  90   2        }
  91   1        
  92   1        while(count --)
  93   1        {
  94   2          *tmp ++ = ch;
  95   2        }
  96   1        
  97   1        return src;
  98   1      }
  99          /*****************************************************************************
 100          函数名称 : mymemcpy
 101          功能描述 : 内存拷贝
 102          输入参数 : dest:目标地址
 103                     src:源地址
 104                     count:数据拷贝数量
 105          返回参数 : src:数据处理完后的源地址
 106          *****************************************************************************/
 107          void *my_memcpy(void *dest, const void *src, unsigned short count)  
 108          {  
 109   1        unsigned char *pdest = (unsigned char *)dest;  
 110   1        const unsigned char *psrc  = (const unsigned char *)src;  
 111   1        unsigned short i;
 112   1        
 113   1        if(dest == NULL || src == NULL)
 114   1        { 
 115   2          return NULL;
 116   2        }
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 3   

 117   1        
 118   1        if((pdest <= psrc) || (pdest > psrc + count))
 119   1        {  
 120   2          for(i = 0; i < count; i ++)
 121   2          {  
 122   3            pdest[i] = psrc[i];  
 123   3          }  
 124   2        }
 125   1        else
 126   1        {
 127   2          for(i = count; i > 0; i --)
 128   2          {  
 129   3            pdest[i - 1] = psrc[i - 1];  
 130   3          }  
 131   2        }  
 132   1        
 133   1        return dest;  
 134   1      }
 135          /*****************************************************************************
 136          函数名称 : int_to_byte
 137          功能描述 : 将int类型拆分四个字节
 138          输入参数 : number:4字节原数据;value:处理完成后4字节数据
 139          返回参数 :无
 140          ****************************************************************************/
 141          void int_to_byte(unsigned long number,unsigned char value[4])
 142          {
 143   1        value[0] = number >> 24;
 144   1        value[1] = number >> 16;
 145   1        value[2] = number >> 8;
 146   1        value[3] = number & 0xff;
 147   1      }
 148          /*****************************************************************************
 149          函数名称 : byte_to_int
 150          功能描述 : 将4字节合并为1个32bit变量
 151          输入参数 : value:4字节数组
 152          返回参数 : number:合并完成后的32bit变量
 153          ****************************************************************************/
 154          unsigned long byte_to_int(const unsigned char value[4])
 155          {
 156   1        unsigned long nubmer = 0;
 157   1      
 158   1        nubmer = (unsigned long)value[0];
 159   1        nubmer <<= 8;
 160   1        nubmer |= (unsigned long)value[1];
 161   1        nubmer <<= 8;
 162   1        nubmer |= (unsigned long)value[2];
 163   1        nubmer <<= 8;
 164   1        nubmer |= (unsigned long)value[3];
 165   1        
 166   1        return nubmer;
 167   1      }
 168          #ifndef BT_CONTROL_SELF_MODE
 169          /*****************************************************************************
 170          函数名称 : mcu_get_reset_bt_flag
 171          功能描述 : MCU获取复位bt成功标志
 172          输入参数 : 无
 173          返回参数 : 复位标志:RESET_BT_ERROR:失败/RESET_BT_SUCCESS:成功
 174          使用说明 : 1:MCU主动调用mcu_reset_bt()后调用该函数获取复位状态
 175                     2:如果为模块自处理模式,MCU无须调用该函数
 176          *****************************************************************************/
 177          unsigned char mcu_get_reset_bt_flag(void)
 178          {
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 4   

 179   1        return reset_bt_flag;
 180   1      }
 181          /*****************************************************************************
 182          函数名称 : mcu_reset_bt
 183          功能描述 : MCU主动重置bt工作模式
 184          输入参数 : 无
 185          返回参数 : 无
 186          使用说明 : 1:MCU主动调用,通过mcu_get_reset_bt_flag()函数获取重置bt是否成功
 187                     2:如果为模块自处理模式,MCU无须调用该函数
 188          *****************************************************************************/
 189          void mcu_reset_bt(void)
 190          {
 191   1        reset_bt_flag = RESET_BT_ERROR;
 192   1        
 193   1        bt_uart_write_frame(BT_RESET_CMD, 0);
 194   1      }
 195          /*****************************************************************************
 196          函数名称 : mcu_get_bt_work_state
 197          功能描述 : MCU主动获取当前bt工作状态
 198          输入参数 : 无
 199          返回参数 : BT_WORK_SATE_E:
 200                      BT_UN_BIND:蓝牙未绑定
 201                      BT_UNCONNECT:蓝牙已绑定未连接
 202                      BT_CONNECTED:蓝牙已绑定并已连接
 203          使用说明 : 无
 204          *****************************************************************************/
 205          unsigned char mcu_get_bt_work_state(void)
 206          {
 207   1        return bt_work_state;
 208   1      }
 209          #endif
 210          
 211          /*****************************************************************************
 212          函数名称 : mcu_dp_raw_update
 213          功能描述 : raw型dp数据上传
 214          输入参数 : dpid:id号
 215                     value:当前dp值指针
 216                     len:数据长度
 217          返回参数 : 无
 218          *****************************************************************************/
 219          unsigned char mcu_dp_raw_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 220          {
 221   1        unsigned short length = 0;
 222   1        
 223   1        if(stop_update_flag == ENABLE)
 224   1          return SUCCESS;
 225   1        //
 226   1        length = set_bt_uart_byte(length,dpid);
 227   1        length = set_bt_uart_byte(length,DP_TYPE_RAW);
 228   1        //
 229   1        length = set_bt_uart_byte(length,len / 0x100);
 230   1        length = set_bt_uart_byte(length,len % 0x100);
 231   1        //
 232   1        length = set_bt_uart_buffer(length,(unsigned char *)value,len);
 233   1        
 234   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
 235   1        
 236   1        return SUCCESS;
 237   1      }
 238          /*****************************************************************************
 239          函数名称 : mcu_dp_bool_update
 240          功能描述 : bool型dp数据上传
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 5   

 241          输入参数 : dpid:id号
 242                     value:当前dp值
 243          返回参数 : 无
 244          *****************************************************************************/
 245          unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
 246          {
 247   1        unsigned short length = 0;
 248   1        
 249   1        if(stop_update_flag == ENABLE)
 250   1          return SUCCESS;
 251   1        
 252   1        length = set_bt_uart_byte(length,dpid);
 253   1        length = set_bt_uart_byte(length,DP_TYPE_BOOL);
 254   1        //
 255   1        length = set_bt_uart_byte(length,0);
 256   1        length = set_bt_uart_byte(length,1);
 257   1        //
 258   1        if(value == FALSE)
 259   1        {
 260   2          length = set_bt_uart_byte(length,FALSE);
 261   2        }
 262   1        else
 263   1        {
 264   2          length = set_bt_uart_byte(length,1);
 265   2        }
 266   1        
 267   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
 268   1        
 269   1        return SUCCESS;
 270   1      }
 271          unsigned char mcu_dp_bool_mesh_update(unsigned char dpid,unsigned char value,unsigned int groupa)
 272          {
 273   1        //unsigned short length = 0;
 274   1          unsigned char check_sum = 0;
 275   1        unsigned short len = 0;
 276   1        unsigned char buf[15];
 277   1          unsigned short i;
 278   1        //unsigned char check_sum = 0;
 279   1        
 280   1       
 281   1        //55 AA 00 07 00 05 01 01 00 01 01 0F
 282   1        if(stop_update_flag == ENABLE)
 283   1          return SUCCESS;
 284   1        
 285   1        buf[0] = 0x55;
 286   1        buf[1] = 0xaa;
 287   1        buf[2] = 0x00;
 288   1        buf[3] = 0xb2;
 289   1        
 290   1        buf[4] = 0x0;
 291   1        buf[5] = 0x7;
 292   1        buf[6] = groupa >> 8;;
 293   1        buf[7] = groupa;
 294   1        buf[8] = dpid;
 295   1        buf[9] = 0x01;
 296   1        buf[10] = 0x00;
 297   1        buf[11] = 0x01;
 298   1        if(value == 0)
 299   1        {
 300   2        buf[12] = 0;
 301   2        }
 302   1        else
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 6   

 303   1        {
 304   2        buf[12] = 1;
 305   2        }
 306   1        
 307   1        for(i = 0; i < 13; i ++)
 308   1        {
 309   2          check_sum += buf[i];
 310   2        }
 311   1        buf[13] = check_sum;
 312   1        len = 14;
 313   1        i = 0;
 314   1         while(len --)
 315   1        {
 316   2          uart_transmit_output(buf[i]);
 317   2          i ++;
 318   2        }
 319   1      
 320   1        
 321   1        return SUCCESS;
 322   1      }
 323          
 324          unsigned char mcu_dp_enum_mesh_update(unsigned char dpid,unsigned char value,unsigned int groupa)
 325          {
 326   1        //unsigned short length = 0;
 327   1          unsigned char check_sum = 0;
 328   1        unsigned short len = 0;
 329   1        unsigned char buf[15];
 330   1          unsigned short i;
 331   1        //unsigned char check_sum = 0;
 332   1        
 333   1       
 334   1        //55 AA 00 07 00 05 01 01 00 01 01 0F
 335   1        if(stop_update_flag == ENABLE)
 336   1          return SUCCESS;
 337   1        
 338   1        buf[0] = 0x55;
 339   1        buf[1] = 0xaa;
 340   1        buf[2] = 0x00;
 341   1        buf[3] = 0xb2;
 342   1        
 343   1        buf[4] = 0x0;
 344   1        buf[5] = 0x7;
 345   1        buf[6] = groupa >> 8;
 346   1        buf[7] = groupa;
 347   1        buf[8] = dpid;
 348   1        buf[9] = 0x01;
 349   1        buf[10] = 0x00;
 350   1        buf[11] = 0x01;
 351   1        if(value == 0)
 352   1        {
 353   2        buf[12] = 0;
 354   2        }
 355   1        else if(value == 1)
 356   1        {
 357   2        buf[12] = 1;
 358   2        }
 359   1        else if(value == 2)
 360   1        {
 361   2        buf[12] = 2;
 362   2        }
 363   1        else if(value == 3)
 364   1        {
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 7   

 365   2        buf[12] = 3;
 366   2        }
 367   1        else if(value == 4)
 368   1        {
 369   2        buf[12] = 4;
 370   2        }
 371   1        else if(value == 5)
 372   1        {
 373   2        buf[12] = 5;
 374   2        }
 375   1        else if(value == 6)
 376   1        {
 377   2        buf[12] = 6;
 378   2        }
 379   1        
 380   1        for(i = 0; i < 13; i ++)
 381   1        {
 382   2          check_sum += buf[i];
 383   2        }
 384   1        buf[13] = check_sum;
 385   1        len = 14;
 386   1        i = 0;
 387   1         while(len --)
 388   1        {
 389   2          uart_transmit_output(buf[i]);
 390   2          i ++;
 391   2        }
 392   1      
 393   1        
 394   1        return SUCCESS;
 395   1      }
 396          
 397          
 398          
 399          
 400          
 401          /*****************************************************************************
 402          函数名称 : mcu_dp_value_update
 403          功能描述 : value型dp数据上传
 404          输入参数 : dpid:id号
 405                     value:当前dp值
 406          返回参数 : 无
 407          *****************************************************************************/
 408          unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
 409          {
 410   1        unsigned short length = 0;
 411   1        
 412   1        if(stop_update_flag == ENABLE)
 413   1          return SUCCESS;
 414   1        
 415   1        length = set_bt_uart_byte(length,dpid);
 416   1        length = set_bt_uart_byte(length,DP_TYPE_VALUE);
 417   1        //
 418   1        length = set_bt_uart_byte(length,0);
 419   1        length = set_bt_uart_byte(length,4);
 420   1        //
 421   1        length = set_bt_uart_byte(length,value >> 24);
 422   1        length = set_bt_uart_byte(length,value >> 16);
 423   1        length = set_bt_uart_byte(length,value >> 8);
 424   1        length = set_bt_uart_byte(length,value & 0xff);
 425   1        
 426   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 8   

 427   1        
 428   1        return SUCCESS;
 429   1      }
 430          
 431          unsigned char mcu_dp_value_mesh_update(unsigned char dpid,unsigned long value,unsigned int groupa)
 432          {
 433   1        //unsigned short length = 0;
 434   1          unsigned char check_sum = 0;
 435   1        unsigned short len = 0;
 436   1        unsigned char idata buf[17];
 437   1          unsigned short i;
 438   1        //unsigned char check_sum = 0;
 439   1        
 440   1       
 441   1        //55 AA 00 07 00 05 01 01 00 01 01 0F
 442   1        if(stop_update_flag == ENABLE)
 443   1          return SUCCESS;
 444   1        
 445   1        buf[0] = 0x55;
 446   1        buf[1] = 0xaa;
 447   1        buf[2] = 0x00;
 448   1        buf[3] = 0xb2;
 449   1        
 450   1        buf[4] = 0x0;
 451   1        buf[5] = 0xA;
 452   1        buf[6] = groupa >> 8;
 453   1        buf[7] = groupa;
 454   1        buf[8] = dpid;
 455   1        buf[9] = 0x02;
 456   1        buf[10] = 0x00;
 457   1        buf[11] = 0x04;
 458   1        buf[12] = value >> 24;
 459   1        buf[13] = value >> 16;
 460   1        buf[14] = value >> 8;
 461   1        buf[15] = value & 0xff;
 462   1        
 463   1      
 464   1        
 465   1        for(i = 0; i < 16; i ++)
 466   1        {
 467   2          check_sum += buf[i];
 468   2        }
 469   1        buf[16] = check_sum;
 470   1        len = 17;
 471   1        i = 0;
 472   1         while(len --)
 473   1        {
 474   2          uart_transmit_output(buf[i]);
 475   2          i ++;
 476   2        }
 477   1      
 478   1        
 479   1        return SUCCESS;
 480   1      }
 481          
 482          
 483          /*****************************************************************************
 484          函数名称 : mcu_dp_string_update
 485          功能描述 : rstring型dp数据上传
 486          输入参数 : dpid:id号
 487                     value:当前dp值指针
 488                     len:数据长度
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 9   

 489          返回参数 : 无
 490          *****************************************************************************/
 491          unsigned char mcu_dp_string_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 492          {
 493   1        unsigned short length = 0;
 494   1        
 495   1        if(stop_update_flag == ENABLE)
 496   1          return SUCCESS;
 497   1        //
 498   1        length = set_bt_uart_byte(length,dpid);
 499   1        length = set_bt_uart_byte(length,DP_TYPE_STRING);
 500   1        //
 501   1        length = set_bt_uart_byte(length,len / 0x100);
 502   1        length = set_bt_uart_byte(length,len % 0x100);
 503   1        //
 504   1        length = set_bt_uart_buffer(length,(unsigned char *)value,len);
 505   1        
 506   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
 507   1        
 508   1        return SUCCESS;
 509   1      }
 510          /*****************************************************************************
 511          函数名称 : mcu_dp_enum_update
 512          功能描述 : enum型dp数据上传
 513          输入参数 : dpid:id号
 514                     value:当前dp值
 515          返回参数 : 无
 516          *****************************************************************************/
 517          unsigned char mcu_dp_enum_update(unsigned char dpid,unsigned char value)
 518          {
 519   1        unsigned short length = 0;
 520   1        
 521   1        if(stop_update_flag == ENABLE)
 522   1          return SUCCESS;
 523   1        
 524   1        length = set_bt_uart_byte(length,dpid);
 525   1        length = set_bt_uart_byte(length,DP_TYPE_ENUM);
 526   1        //
 527   1        length = set_bt_uart_byte(length,0);
 528   1        length = set_bt_uart_byte(length,1);
 529   1        //
 530   1        length = set_bt_uart_byte(length,value);
 531   1        
 532   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
 533   1        
 534   1        return SUCCESS;
 535   1      }
 536          /*****************************************************************************
 537          函数名称 : mcu_dp_fault_update
 538          功能描述 : fault型dp数据上传
 539          输入参数 : dpid:id号
 540                     value:当前dp值
 541          返回参数 : 无
 542          *****************************************************************************/
 543          unsigned char mcu_dp_fault_update(unsigned char dpid,unsigned long value)
 544          {
 545   1        unsigned short length = 0;
 546   1         
 547   1        if(stop_update_flag == ENABLE)
 548   1          return SUCCESS;
 549   1        
 550   1        length = set_bt_uart_byte(length,dpid);
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 10  

 551   1        length = set_bt_uart_byte(length,DP_TYPE_FAULT);
 552   1        //
 553   1        length = set_bt_uart_byte(length,0);
 554   1        
 555   1        if((value | 0xff) == 0xff)
 556   1        {
 557   2          length = set_bt_uart_byte(length,1);
 558   2          length = set_bt_uart_byte(length,value);
 559   2        }
 560   1        else if((value | 0xffff) == 0xffff)
 561   1        {
 562   2          length = set_bt_uart_byte(length,2);
 563   2          length = set_bt_uart_byte(length,value >> 8);
 564   2          length = set_bt_uart_byte(length,value & 0xff);
 565   2        }
 566   1        else
 567   1        {
 568   2          length = set_bt_uart_byte(length,4);
 569   2          length = set_bt_uart_byte(length,value >> 24);
 570   2          length = set_bt_uart_byte(length,value >> 16);
 571   2          length = set_bt_uart_byte(length,value >> 8);
 572   2          length = set_bt_uart_byte(length,value & 0xff);
 573   2        }    
 574   1        
 575   1        bt_uart_write_frame(STATE_UPLOAD_CMD,length);
 576   1      
 577   1        return SUCCESS;
 578   1      }
 579          /*****************************************************************************
 580          函数名称 : mcu_get_dp_download_bool
 581          功能描述 : mcu获取bool型下发dp值
 582          输入参数 : value:dp数据缓冲区地址
 583                     length:dp数据长度
 584          返回参数 : bool:当前dp值
 585          *****************************************************************************/
 586          unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
 587          {
 588   1        int i;
 589   1        i = len;
 590   1        return(value[0]);
 591   1      }
 592          /*****************************************************************************
 593          函数名称 : mcu_get_dp_download_enum
 594          功能描述 : mcu获取enum型下发dp值
 595          输入参数 : value:dp数据缓冲区地址
 596                     length:dp数据长度
 597          返回参数 : enum:当前dp值
 598          *****************************************************************************/
 599          unsigned char mcu_get_dp_download_enum(const unsigned char value[],unsigned short len)
 600          {
 601   1        int i;
 602   1        i = len;
 603   1        return(value[0]);
 604   1      }
 605          /*****************************************************************************
 606          函数名称 : mcu_get_dp_download_value
 607          功能描述 : mcu获取value型下发dp值
 608          输入参数 : value:dp数据缓冲区地址
 609                     length:dp数据长度
 610          返回参数 : value:当前dp值
 611          *****************************************************************************/
 612          unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 11  

 613          {
 614   1        int i;
 615   1        i = len;
 616   1        return(byte_to_int(value));
 617   1      }
 618          /*****************************************************************************
 619          函数名称 : uart_receive_input
 620          功能描述 : 收数据处理
 621          输入参数 : value:串口收到字节数据
 622          返回参数 : 无
 623          使用说明 : 在MCU串口接收函数中调用该函数,并将接收到的数据作为参数传入
 624          *****************************************************************************/
 625          void uart_receive_input(unsigned char value)
 626          {
 627   1        if((queue_in > queue_out) && ((queue_in - queue_out) >= sizeof(bt_queue_buf)))
 628   1        {
 629   2          //数据队列满
 630   2        }
 631   1        else if((queue_in < queue_out) && ((queue_out  - queue_in) == 0))
 632   1        {
 633   2          //数据队列满
 634   2        }
 635   1        else
 636   1        {
 637   2          //队列不满
 638   2          if(queue_in >= (unsigned char *)(bt_queue_buf + sizeof(bt_queue_buf)))
 639   2          {
 640   3            queue_in = (unsigned char *)(bt_queue_buf);
 641   3          }
 642   2          
 643   2          *queue_in ++ = value;
 644   2        }
 645   1      }
 646          /*****************************************************************************
 647          函数名称  : bt_uart_service
 648          功能描述  : bt串口处理服务
 649          输入参数 : 无
 650          返回参数 : 无
 651          使用说明 : 在MCU主函数while循环中调用该函数
 652          *****************************************************************************/
 653          void bt_uart_service(void)
 654          {
 655   1        static unsigned short rx_in = 0;
 656   1        unsigned short offset = 0;
 657   1        unsigned short rx_value_len = 0;             //数据帧长度
 658   1        
 659   1        while((rx_in < sizeof(bt_uart_rx_buf)) && get_queue_total_data() > 0)
 660   1        {
 661   2          bt_uart_rx_buf[rx_in ++] = Queue_Read_Byte();
 662   2        }
 663   1        
 664   1        if(rx_in < PROTOCOL_HEAD)
 665   1          return;
 666   1        
 667   1        while((rx_in - offset) >= PROTOCOL_HEAD)
 668   1        {
 669   2          if(bt_uart_rx_buf[offset + HEAD_FIRST] != FRAME_FIRST)
 670   2          {
 671   3            offset ++;
 672   3            continue;
 673   3          }
 674   2          
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 12  

 675   2          if(bt_uart_rx_buf[offset + HEAD_SECOND] != FRAME_SECOND)
 676   2          {
 677   3            offset ++;
 678   3            continue;
 679   3          }  
 680   2          
 681   2          if(bt_uart_rx_buf[offset + PROTOCOL_VERSION] != VERSION)
 682   2          {
 683   3            offset += 2;
 684   3            continue;
 685   3          }      
 686   2          
 687   2          rx_value_len = bt_uart_rx_buf[offset + LENGTH_HIGH] * 0x100 + bt_uart_rx_buf[offset + LENGTH_LOW] + PR
             -OTOCOL_HEAD;
 688   2          if(rx_value_len > sizeof(bt_uart_rx_buf) + PROTOCOL_HEAD)
 689   2          {
 690   3            offset += 3;
 691   3            continue;
 692   3          }
 693   2          
 694   2          if((rx_in - offset) < rx_value_len)
 695   2          {
 696   3            break;
 697   3          }
 698   2          
 699   2          //数据接收完成
 700   2          if(get_check_sum((unsigned char *)bt_uart_rx_buf + offset,rx_value_len - 1) != bt_uart_rx_buf[offset +
             - rx_value_len - 1])
 701   2          {
 702   3            //校验出错
 703   3            offset += 3;
 704   3            continue;
 705   3          }
 706   2          
 707   2          data_handle(offset);
 708   2          offset += rx_value_len;
 709   2        }//end while
 710   1      
 711   1        rx_in -= offset;
 712   1        if(rx_in > 0)
 713   1        {
 714   2          my_memcpy(bt_uart_rx_buf,bt_uart_rx_buf + offset,rx_in);
 715   2        }
 716   1      }
 717          /*****************************************************************************
 718          函数名称 :  bt_protocol_init
 719          功能描述 : 协议串口初始化函数
 720          输入参数 : 无
 721          返回参数 : 无
 722          使用说明 : 必须在MCU初始化代码中调用该函数
 723          *****************************************************************************/
 724          void bt_protocol_init(void)
 725          {
 726   1        queue_in = (unsigned char *)bt_queue_buf;
 727   1        queue_out = (unsigned char *)bt_queue_buf;
 728   1        //
 729   1      #ifndef BT_CONTROL_SELF_MODE
 730   1        bt_work_state = BT_SATE_UNKNOW;
 731   1      #endif
 732   1      }
 733          
 734          
C51 COMPILER V9.52.0.0   MCU_API                                                           10/13/2020 10:11:56 PAGE 13  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2465    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2     126
   IDATA SIZE       =   ----      17
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
